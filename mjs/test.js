// Import the default export from the JS module generated by Emscripten
import Module from '../src/c.mjs';

/**
 * The main entry point for our application.
 */
async function main() {
    try {
        // 1. Wait for the module to be fully loaded and ready.
        const instance = await Module();
        console.log("Wasm module loaded. Verifying exports...");

        // DEBUG: You can inspect the 'instance' object in your browser's
        // console to see everything that is available.
        console.log("Available Wasm exports:", instance);

        // 2. Create the wrapper function for your C code.
        const wasm_converter_func = instance.cwrap(
            'convert_ms', // The name of the C function to wrap
            null,         // The return type (null for 'void')
            ['number', 'number'] // The argument types (ms, result_pointer)
        );

        if (typeof wasm_converter_func !== 'function') {
            throw new Error("cwrap failed to produce a function. Check export name.");
        }

        // 3. Define the final, high-performance function that uses the Wasm code.
        const fw = function(ms) {
            const resultPointer = instance._malloc(20); // Allocate memory
            wasm_converter_func(ms, resultPointer);     // Run the C code

            const resultArray = [];
            for (let i = 0; i < 5; i++) {
                // This line will now work because 'getValue' was exported.
                resultArray.push(instance.getValue(resultPointer + i * 4, 'i32'));
            }

            instance._free(resultPointer); // Free the memory
            return resultArray;
        };

        // 4. It's now safe to use the function.
        console.log("Running Wasm test...");
        const time = 123456789;

        console.time("Wasm Conversion");
        const result = fw(time);
        console.timeEnd("Wasm Conversion");

        console.log("Result:", result); // Expected: [ 1, 10, 17, 36, 789 ]

    } catch (err) {
        console.error("Error loading or executing Wasm module:", err);
    }
}

// 5. Start the entire process.
main();